{"version":3,"sources":["components/Header/index.js","components/Wrapper/index.js","components/Card/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","children","score","highscore","Wrapper","Card","onClick","clickCount","id","alt","name","src","image","Jumbotron","class","App","state","cards","gameOver","setState","forEach","card","count","alert","find","o","i","console","log","this","sort","Math","random","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kpqCAeeA,G,YAZA,SAACC,GACX,OACA,yBAAKC,UAAY,UACd,yBAAKA,UAAY,SAAQ,4BAAKD,EAAME,WACpC,yBAAKD,UAAU,UACd,uCAAaD,EAAMG,MAAnB,eAAsCH,EAAMI,eCEtCC,EAPC,SAACL,GACb,OACJ,yBAAKC,UAAU,WACdD,EAAME,WCSQI,G,MAXF,SAACN,GACV,OACI,yBAAKC,UAAW,OAAOM,QAAU,kBAAMP,EAAMQ,WAAWR,EAAMS,MAC1D,yBAAKR,UAAY,iBACb,yBAAKS,IAAOV,EAAMW,KAAMC,IAAOZ,EAAMa,Y,aCMtCC,MAXf,WACI,OACI,yBAAKC,MAAM,6BACP,yBAAKA,MAAM,aACP,wBAAIA,MAAM,0BACV,uBAAGA,MAAM,wBC6DVC,E,2MA3DbC,MAAQ,CACNC,QACAf,MAAO,EACPC,UAAW,G,EAGfe,SAAW,WAWP,OAVC,EAAKF,MAAMd,MAAQ,EAAKc,MAAMb,WAC/B,EAAKgB,SAAS,CAAChB,UAAU,EAAKa,MAAMd,OAAO,cAI7C,EAAKc,MAAMC,MAAMG,QAAQ,SAAAC,GACvBA,EAAKC,MAAQ,IAEbC,MAAM,yBAAD,OAA0B,EAAKP,MAAMd,QAC1C,EAAKiB,SAAS,CAACjB,MAAO,KACf,G,EAGXK,WAAa,SAACC,GACZ,EAAKQ,MAAMC,MAAMO,KAAK,SAACC,EAAGC,GACxB,GAAID,EAAEjB,KAAOA,EAAI,CACf,GAAsB,IAAnBS,EAAMS,GAAGJ,MAMV,OALAL,EAAMS,GAAGJ,MAAQL,EAAMS,GAAGJ,MAAQ,EAClC,EAAKH,SAAS,CAACjB,MAAQ,EAAKc,MAAMd,MAAQ,GAAI,WAC5CyB,QAAQC,IAAIC,KAAKb,MAAMd,SAEzB,EAAKc,MAAMC,MAAMa,KAAK,kBAAMC,KAAKC,SAAW,MACrC,EAEP,EAAKd,e,wEAOA,IAAD,OACR,OACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQhB,MAAO2B,KAAKb,MAAMd,MAAOC,UAAW0B,KAAKb,MAAMb,WAAvD,gBAEA,kBAAC,EAAD,MAEC0B,KAAKb,MAAMC,MAAMgB,IAAI,SAAAZ,GAAI,OAEtB,kBAAC,EAAD,CACEd,WAAY,EAAKA,WACjBC,GAAIa,EAAKb,GACT0B,IAAKb,EAAKb,GACVI,MAAOS,EAAKT,e,GArDNuB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.695144da.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Header = (props) => {\r\n     return (\r\n     <div className = \"header\">\r\n        <div className = \"title\"><h1>{props.children}</h1></div>\r\n        <div className=\"scores\">\r\n         <h3> Score: {props.score} Highscore: {props.highscore}</h3>\r\n        </div>\r\n    </div>\r\n\r\n     )\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n","import React from \"react\";\r\n\r\n\r\nconst Wrapper = (props) =>{\r\n    return(\r\n<div className=\"wrapper\">\r\n{props.children}\r\n</div>\r\n    )\r\n}\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nconst Card = (props) => {\r\n    return(\r\n        <div className =\"card\" onClick ={() => props.clickCount(props.id)}>\r\n            <div className = \"img-container\">\r\n                <img alt = {props.name} src = {props.image}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Card;","import React from \"react\";\r\nimport './style.css'\r\n\r\nfunction Jumbotron(){\r\n    return (\r\n        <div class=\"jumbotron jumbotron-fluid\">\r\n            <div class=\"container\">\r\n                <h1 class=\"display-4 text-center\"></h1>\r\n                <p class=\"lead text-center\"></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport './App.css';\nimport Header from \"./components/Header\"\nimport Wrapper from \"./components/Wrapper\"\nimport Card from \"./components/Card\"\nimport cards from \"./cards.json\"\nimport Jumbotron from \"./components/Jumbotron\"\n\nclass App extends Component {\n\n  state = {\n    cards,\n    score: 0,\n    highscore: 0\n}\n\ngameOver = () => {\n  if(this.state.score > this.state.highscore) {\n    this.setState({highscore:this.state.score},function() {\n    })\n  }\n\n  this.state.cards.forEach(card => {\n    card.count = 0;\n  });\n    alert(`Game Over :( \\nscore: ${this.state.score}`);\n    this.setState({score: 0});\n    return true;\n}\n\nclickCount = (id) => {\n  this.state.cards.find((o, i) => {\n    if (o.id === id) {\n      if(cards[i].count === 0){\n        cards[i].count = cards[i].count + 1;\n        this.setState({score : this.state.score + 1}, function(){\n          console.log(this.state.score);\n        });\n        this.state.cards.sort(() => Math.random() - 0.5)\n        return true; \n      } else {\n        this.gameOver();\n      }\n    }\n  });\n}\n\n\n  render () {\n    return (\n    <Wrapper>\n      <Header score={this.state.score} highscore={this.state.highscore}>Clicky Game!</Header>\n      \n      <Jumbotron/>\n      \n      {this.state.cards.map(card => (\n        \n          <Card\n            clickCount={this.clickCount}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n      ))}\n    </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}